#{ MIT License

   Copyright (c) 2017 Paul T.

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE. #}

extern <string.h>;

import std::io;
import std::memory;

module std

    export struct string
        data     : [char];
        len, cap : size_t;
    end;
end;

module std::string

    hidden extern function length:size_t str:[const char] "strlen";
    hidden extern function copy:any_t dest:any_t, src:const any_t, count:size_t "memcpy";
    hidden extern function move:any_t dest:any_t, src:const any_t, count:size_t "memmove";

    #{
        Creates an empty std::string with length and capacity of zero.
    #}
    export function new:std::string()
        ret : std::string;
        ret.data = null;
        ret.len = 0;
        ret.cap = 0;
        return ret;
    end;

    #{
        Creates a std::string from a C string. The string itself is copied so
        any subsequent modifications to the C string will not affect the
        current std::string.
    #}
    export function new:std::string from:[const char]
        ret : std::string;
        len = _::length str:from : size_t;
        ret.data = std::memory::alloc num:len + 1 size:sizeof char;
        ret.len = len;
        ret.cap = len;
        _::copy dest:ret.data src:from count:len + 1;
        return ret;
    end;

    #{
        Deallocates a std::string.
    #}
    export function delete of:[std::string]
        std::memory::free ptr:of->data;
        of->len = 0;
        of->cap = 0;
    end;

    #{
        Returns the character at a specified location.
    #}
    export function at:char of:[std::string], index:size_t
        if of->len > index
            return [index of->data];
        else
            return 0;
        end;
    end;

    #{
        Checks if string is empty
    #}
    export function empty:bool of:[std::string]
        return of->len == 0;
    end;

    #{
        Returns the length of the string
    #}
    export function length:size_t of:[std::string]
        return of->len;
    end;

    #{
        Returns the capacity of the string
    #}
    export function capacity:size_t of:[std::string]
        return of->cap;
    end;

    #{
        Returns the underlying char buffer
    #}
    export function data:[char] of:[std::string]
        return of->data;
    end;

    #{
        Returns the first character. '\0' is returned if string is too short.
    #}
    export function front:char of:[std::string]
        if of->len > 0
            return [0 of->data];
        else
            return 0;
        end;
    end;

    #{
        Returns the last character. '\0' is returned if string is too short.

        Note: In a case where the string has a length of 1, the first character
        is the same as the last character.
    #}
    export function back:char of:[std::string]
        if of->len > 0
            return [of->len - 1 of->data];
        else
            return 0;
        end;
    end;

    #{
        Ensures the underlying buffer has at least the specified new capacity.
        If the new capacity is smaller than the length of the string,
        `trim_to_size` is called and the capacity after this operation is not
        guaranteed to be the specified capacity.

        Returns:
            false if new capacity was larger than the previous capacity and
            the allocation process failed.
    #}
    export function reserve:bool of:[std::string], new_cap:size_t
        if new_cap > of->cap
            new_ptr : any_t;
            new_ptr = std::memory::realloc
                            ptr:of->data
                            new_size:(new_cap + 1) * sizeof char;
            if new_ptr == null
                return false;
            end;

            of->cap = new_cap;
            of->data = new_cap;
        elseif of->len > new_cap
            std::string::trim_to_size of:of;
        end;
        return true;
    end;

    #{
        Resizes the underlying buffer so the size of it is the same as the
        length of the string.
    #}
    export function trim_to_size:void of:[std::string]
        of->data = std::memory::realloc
                            ptr:of->data
                            new_size:(of->len + 1) * sizeof char;
        of->cap = of->len;
    end;

    #{
        Prints a string to stdout
    #}
    export function print:void of:[std::string]
        std::io::print str:of->data;
    end;

    #{
        Prints a string to stdout with newline
    #}
    export function println:void of:[std::string]
        std::io::printf fmt:"%s\n", of->data;
    end;

    #{
        Swaps two strings
    #}
    export function swap:void of, with:[std::string]
        tmpd = of->data : [char];
        of->data = with->data;
        with->data = tmpd;

        tmpl = of->len : size_t;
        of->len = with->len;
        with->len = tmpl;

        tmpc = of->cap : size_t;
        of->cap = with->cap;
        with->cap = tmpc;
    end;
end;
