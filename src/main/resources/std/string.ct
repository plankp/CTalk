#{ MIT License

   Copyright (c) 2017 Paul T.

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE. #}

extern <string.h>;

import std::io;
import std::memory;

module std

    export struct string

        data     : [char];
        len, cap : size_t;
    end;
end;

module std::string

    hidden extern function length:size_t str:[const char] "strlen";
    hidden extern function copy:any_t dest:any_t, src:const any_t, count:size_t "memcpy";
    hidden extern function move:any_t dest:any_t, src:const any_t, count:size_t "memmove";

    export function new:std::string()
        ret : std::string;
        ret.data = null;
        ret.len = 0;
        ret.cap = 0;
        return ret;
    end;

    export function new:std::string from:[const char]
        ret : std::string;
        len = _::length str:from : size_t;
        ret.data = std::memory::alloc num:len + 1 size:sizeof char;
        ret.len = len;
        ret.cap = len;
        _::copy dest:ret.data src:from count:len + 1;
        return ret;
    end;

    export function delete of:std::string
        std::memory::free ptr:of.data;
        of.len = 0;
        of.cap = 0;
    end;

    export function at:char of:std::string, index:size_t
        if of.len > index
            return [index of.data];
        else
            return 0;
        end;
    end;

    export function empty:bool of:std::string
        return of.len == 0;
    end;

    export function length:size_t of:std::string
        return of.len;
    end;

    export function capacity:size_t of:std::string
        return of.cap;
    end;

    export function data:[char] of:std::string
        return of.data;
    end;

    export function front:char of:std::string
        if of.len > 0
            return [0 of.data];
        else
            return 0;
        end;
    end;

    export function back:char of:std::string
        if of.len > 0
            return [of.len - 1 of.data];
        else
            return 0;
        end;
    end;

    export function print:void of:std::string
        std::io::print str:of.data;
    end;

    export function println:void of:std::string
        std::io::printf fmt:"%s\n", of.data;
    end;
end;
